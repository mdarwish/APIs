swagger: "2.0"
info:
  description: "This is a mock of E-Connect server. You can learn about e-Connect APIs and test them here."
  version: "1.0.0"
  title: "E-Connect APIs"
  termsOfService: "#"
  contact:
    email: "info@econnect.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v1"
tags:
- name: "user"
  description: "Operations about user"
- name: "users"
  description: "Quries about users"
- name: "meeting"
  description: "Access to booked meetings"
- name: "schedule"
  description: "Access to booked meetings"
schemes:
- "https"
- "http"
paths:
  /users:
    get:
      tags:
      - "users"
      summary: "List all users"
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        "405":
          description: "Invalid input"
  /users/findByStatus:
    get:
      tags:
      - "users"
      summary: "Finds user by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findUserByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Invalid status value"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    patch:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    patch:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /meeting:
    post:
      tags:
      - "meeting"
      summary: "Create meeting"
      description: "Create new meeting."
      operationId: "createMeeting"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created meeting object"
        required: true
        schema:
          $ref: "#/definitions/Meeting"
      responses:
        default:
          description: "successful operation"
  /meeting/createWithArray:
    patch:
      tags:
      - "meeting"
      summary: "Creates list of meetings with given input array"
      description: ""
      operationId: "createMeetingsWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of meeting objects"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Meeting"
      responses:
        default:
          description: "successful operation"
  /meeting/createWithList:
    patch:
      tags:
      - "meeting"
      summary: "Creates list of meetings with given input array"
      description: ""
      operationId: "createMeetingssWithListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of meetings object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Meeting"
      responses:
        default:
          description: "successful operation"
  /meeting/{meetingID}:
    get:
      tags:
      - "meeting"
      summary: "Get meeting by ID"
      description: ""
      operationId: "getMeetingByID"
      produces:
      - "application/json"
      parameters:
      - name: "meetingID"
        in: "path"
        description: "The ID that needs to be fetched."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Meeting"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Meeting not found"
    put:
      tags:
      - "meeting"
      summary: "Updated meeting"
      description: "This can only be done by the logged in user."
      operationId: "updateMeeting"
      produces:
      - "application/json"
      parameters:
      - name: "meetingID"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated meeting object"
        required: true
        schema:
          $ref: "#/definitions/Meeting"
      responses:
        "400":
          description: "Invalid meeting supplied"
        "404":
          description: "Meeting not found"
    delete:
      tags:
      - "meeting"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteMeeting"
      produces:
      - "application/json"
      parameters:
      - name: "meetingID"
        in: "path"
        description: "The id of the meeting that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid meeting id supplied"
        "404":
          description: "Meeting not found"

securityDefinitions:
  connect_auth:
    type: "oauth2"
    authorizationUrl: "http://envento-testing.mideastsoft.com"
    flow: "implicit"
    scopes:
      write:user: "modify pets in your account"
      read:user: "read your pets"
      write:meeting: "modify pets in your account"
      read:meeting: "read your pets"
      write:schedule: "modify pets in your account"
      read:schedule: "read your pets"
      write:category: "modify pets in your account"
      read:category: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Meeting:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      meeting_name:
        type: "string"
      url:
        type: "string"
      meeting_from_datetime:
        type: "string"
        format: "date-time"
      meeting_to_datetime:
        type: "string"
        format: "date-time"
      meetingStatus:
        type: "integer"
        format: "int32"
        description: "Meeting Status"
    xml:
      name: "User"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  